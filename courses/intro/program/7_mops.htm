<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/xhtml-strict.dtd">
<html> 
	<head>
  	<title>Bores Signal Processing - Programming DSPs: DSPs: MIPS MOPS and MFlops</title>
		<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
		<meta name="keywords" content="DSP online teaching signals digital signal processing IIR FIR filters frequency response window functions" />
		<meta name="author" content="Bores Signal Processing" />
		<meta name="description" content="Training in DSP, software architectures and Philips TriMedia architectures" />
		<link href="../../../css/global.css" rel="stylesheet" />
		<script type ="text/javascript">
			<!--Hide script from old browsers
			var page = "online_dsp_program_sec"; // for courses_menu
			var section = "index_online_sec_sec";  //for horizontal menu
			var curr1PageIndex = 1;  //level1 of the menu
			var curr2PageIndex = 7;	//level2 of the menu
			var curr3PageIndex = 6;	//level3 of the menu		
			//end hiding of script -->
		</script>
		<!-- validated -->
	</head>
  <body>
	   <div id="outerWrapper">
		  <div id="innerWrapper">
				<noscript><p class="declaration">This web site uses Javascript. We use Javascript to improve the user's experience and to enable better maintenance of our site.<br /><br />To be able to view this site properly it is necessary to either <span class="emphasis">enable Javascript</span> or click on <span class="emphasis">allow blocked content</span><br /><br />We promise that we <span class="emphasis">do not:</span></p><ul class="middle"><li>give you content you do not want</li><li>collect any information from your computer</li><li>damage data on your computer</li><li>install software on your computer with or without your consent</li><li>allow someone else to  your computer remotely</li></ul></noscript>
		<a href="../../../ebooks/art_of_ip.htm"><img class="right" src="../../../ebooks/graphics/art_of_ip.png" alt="The Art of Image Processing - Kindle eBook" title="The Art of Image Processing - Kindle eBook" height="150" width="150" /></a>
			  <img alt="Company logo" title="Bores Signal Processing logo" src="../../../graphics/logo.gif" height="100" width="150" />
			  <h1>Introduction to DSP - Programming DSPs: MIPS MOPS and MFlops</h1>
			  <div class="hMenu">
				  <script type="text/javascript" src="../../../scripts/horizontal_menu.js"></script>
			  </div>
			  <table class="main">
				  <tr>
					  <td class="menuCell">
						  <script type="text/javascript" src="../../../scripts/courses_menu.js"></script>
					  </td>
					  <td class="mainCell">
							<p>The development of efficient assembly language code shows how efficient a DSP processor can be: each assembler instruction is performing several useful operations. But it also shows how difficult it can be to program such a specialised processor efficiently.</p> 
							<p class="code">temp = *c_ptr++) * *x_ptr--);<br />a1   =   *r3++   *   *r4--<br />for (k = 1; k &lt; N-1; k++)<br />do 0,r1<br />temp  = temp +    *c_ptr++ * *x_ptr--)<br />a1    =  a1  +      *r3++  *   *r4--<br />*y_ptr++ = temp<br />*r2++   =  a1<br /></p> 
							<p>Bear in mind that we use DSP processors to do specialised jobs fast. If cost is no object, then it may be permissible to throw away processor power by inefficient coding: but in that case we would perhaps be better advised to choose an easier processor to program in the first place. A sensible reason to use a DSP processor is to perform DSP either at lowest cost, or at highest
		  speed. In either case, wasting processor power leads to a need for more hardware which makes a more expensive system which leads to a more expensive final product which, in a sane world, would lead to loss of sales to a competitive product that was better designed.</p> 
							<p>One example shows how essential it is to make sure a DSP processor is programmed efficiently:</p>
							<img src="gifs/7_mops.gif" width="512" height="197" title="Efficient programming" alt="Efficient programming" /> 
							<p>The diagram shows a single assembler instruction from the <a href="../chips/6_dsp32c.htm">Lucent DSP32C</a> processor. This instruction does a lot of things at once:</p> 
							<ul> 
		  					<li>two arithmetic operations (an add and a multiply)</li> 
		  					<li>three memory accesses (two reads and a write)</li> 
		  					<li>one floating point register update</li> 
		  					<li>three address pointer increments</li> 
							</ul> 
							<p>All of these operations can be done in one instruction. This is how the processor can be made fast. But if we don't use any of these operations, we are throwing away the potential of the processor and may be slowing it down drastically. Consider how this instruction can be translated into MIPS or Mflops.</p> 
							<p>The processor runs with an 80 MHz clock. But, to achieve four memory accesses per instruction it uses a <a href="../chips/6_mem.htm">modified von Neuman</a> memory architecture which requires it to divide the system clock by four, resulting in an instruction rate of 20 MIPS. If we go into manic marketing mode, we can have fun working out ever higher MIPS or MOPS ratings as follows:</p> 
							<h3>80 MHz clock </h3> 
							<p>20 MIPS = <span class="red">20 MOPS</span> </p> 
							<p>but 2 floating point operators per cycle = <span class="red">40 MOPS</span></p> 
							<p>and four memory accesses per instruction =<span class="red"> 80 MOPS</span></p> 
							<p>plus three pointer increments per instruction =<span class="red"> 60 MOPS</span></p> 
							<p>plus one floating point register update = <span class="red">20 MOPS</span></p> 
							<p>making a grand total MOPS rating of <span class="red">200 MOPS</span></p> 
							<p>Which exercise serves to illustrate three things:</p> 
							<ul> 
		  					<li>MIPS, MOPS and Mflops are misleading measures of DSP power</li> 
		  					<li>marketing men can squeeze astonishing figures out of nothing</li> 
							</ul> 
							<p>Of course, we omitted to include in the MOPS rating (as some manufacturers do) the possibility of DMA on <a href="../chips/6_io.htm">serial port</a> and <a href="../chips/6_io.htm">parallel port</a>, and all those associated increments of DMA address pointers, and if we had multiple <a href="../chips/6_io.htm">comm ports</a>, each with DMA, we could go really wild...</p> 
							<p>Apart from a cheap laugh at the expense of marketing, there is a very serious lesson to be drawn from this exercise. Suppose we only did adds with this processor? Then the Mflops rating falls from a respectable 40 Mflops to a pitiful 20 Mflops. And if we don't use the memory accesses, or the pointer increments, then we can cut the MOPS rating from 200 MOPS to 20 MOPS.</p> 
							<p>It is very easy indeed to write very inefficient DSP code. Luckily it is also quite easy, with a little care, to write very efficient DSP code.</p> 
							<p>
								<img class="right" src="../gifs/buttons.jpg" usemap="#map1" width="171" height="18" alt="backward/forward" /> 
		  			    <map name="map1" id="map1">
			 			      <area shape="rect" coords="2,3,42,15" href="index.htm" alt="go back to start of module" /><!--go back to start of module -->
			 			      <area shape="rect" coords="43,2,84,16" href="7_real.htm" alt="go back to previous page" /><!--go to previous page -->
			 			      <area shape="rect" coords="84,2,127,15" href="../index.htm" alt="go to next page" /><!--go to next page -->
			 			      <area shape="rect" coords="126,2,169,16" href="../index.htm" alt="go to next module" /><!-- go to next module -->  
		  			    </map>
					    </p>
				    </td>
			    </tr>
		    </table>	
		  </div>
		  <hr></hr>
		  <div class="footer">
				<script type="text/javascript" src="../../../scripts/address_level4.js"></script>
  		</div>
		</div>		
	</body>
</html>