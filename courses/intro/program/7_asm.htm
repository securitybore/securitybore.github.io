<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/xhtml-strict.dtd">
<html> 
	<head>
  	<title>Bores Signal Processing - Programming DSPs: assembler</title>
		<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
		<meta name="keywords" content="DSP online teaching signals digital signal processing IIR FIR filters frequency response window functions" />
		<meta name="author" content="Bores Signal Processing" />
		<meta name="description" content="Training in DSP, software architectures and Philips TriMedia architectures" />
		<link href="../../../css/global.css" rel="stylesheet" />
		<script type ="text/javascript">
			<!--Hide script from old browsers
			var page = "online_dsp_program_sec"; // for courses_menu
			var section = "index_online_sec_sec";  //for horizontal menu
			var curr1PageIndex = 1;  //level1 of the menu
			var curr2PageIndex = 7;	//level2 of the menu
			var curr3PageIndex = 4;	//level3 of the menu		
			//end hiding of script -->
		</script>
		<!-- validated -->
	</head>
  <body>
	   <div id="outerWrapper">
		  <div id="innerWrapper">
				<noscript><p class="declaration">This web site uses Javascript. We use Javascript to improve the user's experience and to enable better maintenance of our site.<br /><br />To be able to view this site properly it is necessary to either <span class="emphasis">enable Javascript</span> or click on <span class="emphasis">allow blocked content</span><br /><br />We promise that we <span class="emphasis">do not:</span></p><ul class="middle"><li>give you content you do not want</li><li>collect any information from your computer</li><li>damage data on your computer</li><li>install software on your computer with or without your consent</li><li>allow someone else to  your computer remotely</li></ul></noscript>
			  <img class="right" src="../../../graphics/composite_training_banner.jpg" alt="We offer training classes and eBooks on DSP, and in Media Processing (TriMedia)" title="We offer training classes and eBooks on DSP, and in Media Processing (TriMedia)" height="99" width="300" />
			  <img alt="Company logo" title="Bores Signal Processing logo" src="../../../graphics/logo.gif" height="100" width="150" />
			  <h1>Introduction to DSP - Programming DSPs: assembler</h1>
			  <div class="hMenu">
				  <script type="text/javascript" src="../../../scripts/horizontal_menu.js"></script>
			  </div>
			  <table class="main">
				  <tr>
					  <td class="menuCell">
						  <script type="text/javascript" src="../../../scripts/courses_menu.js"></script>
					  </td>
					  <td class="mainCell">
							<p>To illustrate transcribing the C program for the FIR filter into DSP assembly language, we will use the assembler syntax of the Lucent DSP32C processor. This processor is excellent for this purpose, because its assembler syntax is remarkably similar to C language and so makes it easy to see how the C code maps onto the underlying DSP architecture. It is important to note that the illustration remains valid in general for most DSP processors, since their basic design features are so similar: but the other processors have more impenetrable assembler syntax.</p> 
							<p>*r3 is equivalent to the C syntax <span class="code">*c_ptr</span></p> 
							<p>*r3++ is equivalent to the C syntax <span class="code">*c_ptr++ </span></p> 
							<p>a1 is equivalent to the C declaration float temp</p> 
							<p>Some examples of simple DSP32C instructions show the similarity to C further:</p> 
							<dl> 
		  					<dt>a1=*r3</dt> 
		  					<dd>fetch a floating point value from memory pointed to by address register r2 and store it in the float register a1</dd> 
							</dl> 
							<dl> 
		  					<dt>a1=*r3++</dt> 
		  					<dd>fetch a floating point value from memory pointed to by address register r3 and store it in the float register a1: having done so, increment address register r3 to point to the next floating point value in memory</dd> 
							</dl> 
							<p>The general DSP32C instruction syntax shows the typical DSP processor's ability to perform a multiplication and addition in a single instruction:</p> 
							<p class="code">a = b + c * d</p> 
							<p>Each term in the instruction can be any of the four floating point registers, or up to three of the terms can access data through address registers used as pointers:</p> 
							<p>a0=a1 + a2 * a3 - using only registers </p> 
							<p>a0=a1 + *r2 * *r3 - using pointers for two memory reads </p> 
							<p>a1=a1 + *r2++ * *r3++ - using pointers for memory reads and incrementing those pointers</p> 
							<p>Armed with the above rudimentary knowledge of this DSP processor's assembler syntax, we can substitute assembler variables for the C variables:</p> 
							<p class="code">temp: - a1 (floating point register)</p> 
							<p class="code">y_ptr: - r2 (address register to be used as a pointer)</p> 
							<p class="code">c_ptr: - r3 (address register to be used as a pointer)</p> 
							<p class="code">x_ptr: - r4 (address register to be used as a pointer)</p> 
							<p>The appropriate assembler can now be written underneath the C code, exploiting the great similarity of the assembler to C in this case:</p> 
							<p class="code">temp = *c_ptr++) * *x_ptr--);<br />a1   =   *r3++   *   *r4--<br />for (k = 1; k &lt; N-1; k++)<br />do 0,r1<br />temp  = temp +    *c_ptr++ * *x_ptr--)<br />a1    =  a1  +      *r3++  *   *r4--<br />*y_ptr++ = temp<br />*r2++   =  a1</p> 
							<p>Note that for this processor, one line of C compiles down to one assembler instruction.</p> 
							<p class="note">The 'do 0,r1' instruction is an efficient and concise way to replace the loop control: it means, "do the next (0+1) instructions (r1+1) times. This is an example of a 'zero overhead do loop': the processor supports this special instruction with no overhead at all for the actual execution of the loop control.</p> 
							<p>
								<img class="right" src="../gifs/buttons.jpg" usemap="#map1" width="171" height="18" alt="backward/forward" /> 
		  			    <map name="map1" id="map1">
			 			      <area shape="rect" coords="2,3,42,15" href="index.htm" alt="go back to start of module" /><!--go back to start of module -->
			 			      <area shape="rect" coords="43,2,84,16" href="7_misc.htm" alt="go back to previous page" /><!--go to previous page -->
			 			      <area shape="rect" coords="84,2,127,15" href="7_real.htm" alt="go to next page" /><!--go to next page -->
			 			      <area shape="rect" coords="126,2,169,16" href="../index.htm" alt="go to next module" /><!-- go to next module -->  
		  			    </map>
					    </p>
				    </td>
			    </tr>
		    </table>	
		  </div>
		  <hr></hr>
		  <div class="footer">
				<script type="text/javascript" src="../../../scripts/address_level4.js"></script>
  		</div>
		</div>		
	</body>
</html>