<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/xhtml-strict.dtd">
<html> 
	<head>
  	<title>Bores Signal Processing - Programming DSPs: using pointers</title>
		<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
		<meta name="keywords" content="DSP online teaching signals digital signal processing IIR FIR filters frequency response window functions" />
		<meta name="author" content="Bores Signal Processing" />
		<meta name="description" content="Training in DSP, software architectures and Philips TriMedia architectures" />
		<link href="../../../css/global.css" rel="stylesheet" />
		<script type ="text/javascript">
			<!--Hide script from old browsers
			var page = "online_dsp_program_sec"; // for courses_menu
			var section = "index_online_sec_sec";  //for horizontal menu
			var curr1PageIndex = 1;  //level1 of the menu
			var curr2PageIndex = 7;	//level2 of the menu
			var curr3PageIndex = 2;	//level3 of the menu		
			//end hiding of script -->
		</script>
		<!-- validated -->
	</head>
  <body>
	   <div id="outerWrapper">
		  <div id="innerWrapper">
				<noscript><p class="declaration">This web site uses Javascript. We use Javascript to improve the user's experience and to enable better maintenance of our site.<br /><br />To be able to view this site properly it is necessary to either <span class="emphasis">enable Javascript</span> or click on <span class="emphasis">allow blocked content</span><br /><br />We promise that we <span class="emphasis">do not:</span></p><ul class="middle"><li>give you content you do not want</li><li>collect any information from your computer</li><li>damage data on your computer</li><li>install software on your computer with or without your consent</li><li>allow someone else to  your computer remotely</li></ul></noscript>
		<a href="../../../ebooks/art_of_ip.htm"><img class="right" src="../../../ebooks/graphics/art_of_ip.png" alt="The Art of Image Processing - Kindle eBook" title="The Art of Image Processing - Kindle eBook" height="150" width="150" /></a>
			  <img alt="Company logo" title="Bores Signal Processing logo" src="../../../graphics/logo.gif" height="100" width="150" />
			  <h1>Introduction to DSP - Programming DSPs: using pointers</h1>
			  <div class="hMenu">
				  <script type="text/javascript" src="../../../scripts/horizontal_menu.js"></script>
			  </div>
			  <table class="main">
				  <tr>
					  <td class="menuCell">
						  <script type="text/javascript" src="../../../scripts/courses_menu.js"></script>
					  </td>
					  <td class="mainCell">
							<p>A naive C language program to implement an FIR filter is inefficient because it accesses array elements by array index:</p> 
								<p class="code">y[n] = 0.0;<br />for (k = 0; k &lt; N; k++)<br />y[n] = y[n] + c[k] * x[n-k];</p> 
								<p>To understand why accessing by array index is inefficient, remember that an array is really just a table of numbers in sequential memory locations. The C compiler only know the start address of the array. To actually read any array element the compiler first has to find the address of that particular element. So whenever an array element is accessed by its array index [i] the compiler has to make a calculation:</p>
								<img src="gifs/7_array.gif" width="512"	height="283" title="Finding address of array element" alt="Finding address of array element" /> 
								<p>The diagram shows how the compiler would calculate the address of an array element specified by index as x[n - k]. The calculation requires several steps:</p> 
								<ul> 
		  						<li>load the start address of the table in memory</li> 
		  						<li>load the value of the index n</li> 
		  						<li>load the value of the index k</li> 
		  						<li>calculate the offset [n - k]</li> 
		  						<li>add the offset to the start address of the array</li> 
								</ul> 
								<p>This entails five operations: three reads from memory, and two arithmetic operations. Only after all five operations can the compiler actually read the array element.</p> 
								<p>C language provides the 'pointer' type precisely to avoid the inefficiencies of accessing array elements by index.</p> 
								<p class="note">In C, the syntax *ptr indicates that ptr is a pointer which means:</p> 
								<ul class="note"> 
		  						<li >the variable ptr is to be treated as containing an address</li> 
		  						<li>the '*' means the data is read from that address</li> 
								</ul> 
								<p class="note">Pointers can be modified after the data has been accessed. The syntax *ptr++ means:</p> 
								<ul class="note"> 
		  					<li>the variable ptr is to be treated as containing an address</li> 
		  					<li>the '*' means the data is read from that address</li> 
		  					<li>the '++' means that, having read the data, the pointer ptr is incremented to point to the next sequential data element </li> 
							</ul> 
							<p>Accessing the array elements using pointers is more efficient than by index: </p>
							<img src="gifs/7_ptr1.gif" width="512" height="287" title="Accessing arrays with pointers" alt="Accessing arrays with pointers" /> 
							<p>Each pointer still has to be initialised: but only once, before the loop; and only to the start address of the array, so not requiring any arithmetic to calculate offsets. Within the loop, the pointers are simply incremented so that they point automatically to the next array element ready for the next pass through the loop.</p> 
							<p>Using pointers is more efficient than array indices on any processor: but it is especially efficient for DSP processors because DSP processors are excellent at <a href="../chips/6_maths.htm">address arithmetic</a>. In fact, address increments often come for free. For example, the <a href="../chips/6_dsp32c.htm">Lucent DSP32C</a> processor has several 'free' modes of pointer address generation:</p> 
							<p><span class="red">*rP - register indirect :</span> read the data pointed to by the address in register rP </p> 
							<p><span class="red">*rP++ - postincrement:</span> having read the data, postincrement the address pointer to point to the next value in the array </p> 
							<p><span class="red">*rP++rI - register postincrement: </span>having read the data, postincrement the address pointer <span class="italic">by the amount held in register rI</span> to point to <span class="italic">rI</span> values further down the array </p> 
							<p><span class="red">*rP++rIr - bit reversed:</span>having read the data, postincrement the address pointer to point to the next value in the array, <span class="italic">as if the address bits were in bit reversed order </span></p> 
							<p>The address increments are performed in the same instruction as the data access to which they refer: and they incur <span class="red">no overhead</span> at all. More than this, as we shall see <a href="7_mops.htm">later</a>, most DSP processors can perform two or three address increments for free in each instruction. So the use of pointers is crucially important for DSP processors.</p> 
							<p class="note">Some C compilers optimise code. For example, one of the Texas Instruments C compilers would, with full optimisation selected, take the initial naive C code but produce assembler that corresponds closely to the code using pointers. This is very nice but there are three cautions to be observed:</p> 
							<ul class="note"> 
		  					<li>optimisation can often be used only in restrictive circumstances - for example in the absence of interrupts</li> 
		  					<li>optimisation is compiler dependent: so code that relies on compiler optimisation could become very inefficient when ported to another compiler</li> 
							</ul> 
							<p class="note">One reason to use C is so that the programmer can write code that is very close to the operation of the processor. This is often desirable in DSP, where we want to have a high degree of control over exactly what the processor is doing at all times. Optimisation changes the code you wrote into code the compiler thought was better: in the worst case the code may not actually work when optimised.</p> 
							<p>
								<img class="right" src="../gifs/buttons.jpg" usemap="#map1" width="171" height="18" alt="backward/forward" /> 
		  			    <map name="map1" id="map1">
			 			      <area shape="rect" coords="2,3,42,15" href="index.htm" alt="go back to start of module" /><!--go back to start of module -->
			 			      <area shape="rect" coords="43,2,84,16" href="7_filter.htm" alt="go back to previous page" /><!--go to previous page -->
			 			      <area shape="rect" coords="84,2,127,15" href="7_misc.htm" alt="go to next page" /><!--go to next page -->
			 			      <area shape="rect" coords="126,2,169,16" href="../index.htm" alt="go to next module" /><!-- go to next module -->  
		  			    </map>
					    </p>
				    </td>
			    </tr>
		    </table>	
		  </div>
		  <hr></hr>
		  <div class="footer">
				<script type="text/javascript" src="../../../scripts/address_level4.js"></script>
  		</div>
		</div>		
	</body>
</html>