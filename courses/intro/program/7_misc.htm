<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/xhtml-strict.dtd">
<html> 
	<head>
  	<title>Bores Signal Processing - Programming DSPs: limiting memory</title>
		<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
		<meta name="keywords" content="DSP online teaching signals digital signal processing IIR FIR filters frequency response window functions" />
		<meta name="author" content="Bores Signal Processing" />
		<meta name="description" content="Training in DSP, software architectures and Philips TriMedia architectures" />
		<link href="../../../css/global.css" rel="stylesheet" />
		<script type ="text/javascript">
			<!--Hide script from old browsers
			var page = "online_dsp_program_sec"; // for courses_menu
			var section = "index_online_sec_sec";  //for horizontal menu
			var curr1PageIndex = 1;  //level1 of the menu
			var curr2PageIndex = 7;	//level2 of the menu
			var curr3PageIndex = 3;	//level3 of the menu		
			//end hiding of script -->
		</script>
		<!-- validated -->
	</head>
  <body>
	   <div id="outerWrapper">
		  <div id="innerWrapper">
				<noscript><p class="declaration">This web site uses Javascript. We use Javascript to improve the user's experience and to enable better maintenance of our site.<br /><br />To be able to view this site properly it is necessary to either <span class="emphasis">enable Javascript</span> or click on <span class="emphasis">allow blocked content</span><br /><br />We promise that we <span class="emphasis">do not:</span></p><ul class="middle"><li>give you content you do not want</li><li>collect any information from your computer</li><li>damage data on your computer</li><li>install software on your computer with or without your consent</li><li>allow someone else to  your computer remotely</li></ul></noscript>
			  <img class="right" src="../../../graphics/composite_training_banner.jpg" alt="We offer training classes and eBooks on DSP, and in Media Processing (TriMedia)" title="We offer training classes and eBooks on DSP, and in Media Processing (TriMedia)" height="99" width="300" />
			  <img alt="Company logo" title="Bores Signal Processing logo" src="../../../graphics/logo.gif" height="100" width="150" />
			  <h1>Introduction to DSP - Programming DSPs: limiting memory</h1>
			  <div class="hMenu">
				  <script type="text/javascript" src="../../../scripts/horizontal_menu.js"></script>
			  </div>
			  <table class="main">
				  <tr>
					  <td class="menuCell">
						  <script type="text/javascript" src="../../../scripts/courses_menu.js"></script>
					  </td>
					  <td class="mainCell"> 
							<p>Memory accesses are bottlenecks.</p>
							<img src="gifs/7_mem.gif"	width="512" height="125" title="Memory bottlenecks" alt="Memory bottlenecks" /> 
							<p>DSP processors can make <a href="../chips/6_mem.htm">multiple memory accesses</a> in a single instruction cycle. But the inner loop of the FIR filter program requires four memory accesses: three reads for each of the operands, and one write of the result to memory. Even without counting the need to load the instruction, this exceeds the capacity of a DSP processor. For instance the <a href="../chips/6_dsp32c.htm">Lucent DSP32C</a> can make four memory accesses per instruction cycle: two reads of operands, plus one write of the result, plus the read of one instruction. Even this is not enough for the simple line of C code that forms the inner loop of the FIR filter program.</p> 
							<p>Fortunately, DSP processors have lots of <a href="../chips/6_maths.htm">registers</a> which can be used to hold values inside the processor for later use - thus economising on memory accesses. We can see that the result of the inner loop is used again and again during the loop: it as the code is written, it has to be read from memory and then written back to memory in each pass. Making this a <a href="../chips/6_maths.htm">register</a> variable will allow it to be held within the processor, thus saving two memory accesses:</p> 
							<p class="code">register float temp;<br />temp = 0.0;<br />for (k = 0; k &lt; N; k++)<br />temp = temp + *c_ptr++ * *x_ptr--;</p>
							<p>The C declaration 'register float temp' means that variable temp is to be held in a processor register: in this case, a <a href="../chips/6_data.htm">floating point</a> register. The inner loop now only requires two memory accesses, to read the two operands *c_ptr and *x_ptr (three accesses if you count the instruction load) - this is now within the capabilities of the DSP processor in a single instruction.</p> 
							<p class="note">A small point to note is that the initialisation of the register variable <span class="code">temp=0.0</span> is wasted. It is simple to make use of this necessary initialisation to make the first calculation, thus reducing the number of iterations of the inner loop:</p> 
							<p class="code">register float temp;<br />temp = *c_ptr++ * *x_ptr--;<br />for (k = 1; k &lt; N; k++)<br />temp = temp + *c_ptr++ * *x_ptr--;</p> 
							<p>This leads to a more efficient C program for the FIR filter:</p> 
							<p class="code">float y[N], c[N], x[N];<br />float *y_ptr, *c_ptr, *x_ptr;<br />register float temp;<br />int n, k;<br />y_ptr = &amp;y[0];<br />for (n = 0; n &lt; N-1; n++) {<br /> c_ptr = &amp;c[0]; <br />x_ptr = &amp;x[N-1];<br />temp = *c_ptr++ * *x_ptr--;<br />for (k = 1; k &lt; N; k++)<br />temp = temp + *c_ptr++ * *x_ptr--;<br />*y_ptr++ = temp;}}</p> 
							<p>
								<img class="right" src="../gifs/buttons.jpg" usemap="#map1" width="171" height="18" alt="backward/forward" /> 
		  			    <map name="map1" id="map1">
			 			      <area shape="rect" coords="2,3,42,15" href="index.htm" alt="go back to start of module" /><!--go back to start of module -->
			 			      <area shape="rect" coords="43,2,84,16" href="7_array.htm" alt="go back to previous page" /><!--go to previous page -->
			 			      <area shape="rect" coords="84,2,127,15" href="7_asm.htm" alt="go to next page" /><!--go to next page -->
			 			      <area shape="rect" coords="126,2,169,16" href="../index.htm" alt="go to next module" /><!-- go to next module -->  
		  			    </map>
					    </p>
				    </td>
			    </tr>
		    </table>	
		  </div>
		  <hr></hr>
		  <div class="footer">
				<script type="text/javascript" src="../../../scripts/address_level4.js"></script>
  		</div>
		</div>		
	</body>
</html>